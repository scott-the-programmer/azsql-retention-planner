name: Build and Push Frontend Docker Image (native per-arch + manifest)

on:
  push:
    branches: [ main ]
    paths-ignore: [ 'api/**' ]
  pull_request:
    branches: [ main ]
    paths-ignore: [ 'api/**' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: azsql-ret-frontend

jobs:
  build:
    name: Build image (${{ matrix.arch }})
    # Matrix strategy to DRY architecture-specific builds.
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: amd64
            platform: linux/amd64
            runner: ubuntu-latest
          - arch: arm64
            platform: linux/arm64
            runner: ubuntu-24.04-arm
    runs-on: ${{ matrix.runner }}
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags â€” used later for manifest)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build image (push by digest only)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ matrix.platform }}
          # Push by digest only; tags applied later to multi-arch manifest.
          outputs: type=image,name=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Save digest artifact
        run: echo "${{ steps.build.outputs.digest }}" > digest-${{ matrix.arch }}.txt

      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.arch }}
          path: digest-${{ matrix.arch }}.txt
          retention-days: 1

  create-manifest:
    name: Create and tag multi-arch manifest
    runs-on: ubuntu-latest
    needs: [ build ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags for manifest)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          path: digests
          merge-multiple: true

      - name: Create multi-arch manifest(s)
        run: |
          set -euo pipefail
          echo "Creating manifest list(s) for tags:"
          echo "${{ steps.meta.outputs.tags }}"
          amd64_digest=$(cat digests/digest-amd64.txt)
          arm64_digest=$(cat digests/digest-arm64.txt)
          echo "amd64 digest: $amd64_digest"
          echo "arm64 digest: $arm64_digest"
          # Iterate through newline-separated tags
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            [ -z "$tag" ] && continue
            echo "Processing tag $tag"
            docker buildx imagetools create \
              -t "$tag" \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${amd64_digest} \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${arm64_digest}
          done

      - name: Inspect 'latest' (optional)
        if: contains(steps.meta.outputs.tags, 'latest')
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest