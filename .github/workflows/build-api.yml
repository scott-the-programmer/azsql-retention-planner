name: Build and Push API Docker Image (native per-arch + manifest)

on:
  push:
    branches: [ main ]
    paths: [ 'api/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'api/**' ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: azsql-ret-api

jobs:
  build-amd64:
    name: Build amd64 image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags — will attach in manifest stage)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build amd64 image (push by digest only)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          platforms: linux/amd64
          outputs: type=image,name=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-arm64:
    name: Build arm64 image
    # If GitHub's native ARM runner label differs or is unavailable, replace with a self-hosted label like: runs-on: [self-hosted, arm64]
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
    outputs:
      digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags — will attach in manifest stage)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build arm64 image (push by digest only)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          platforms: linux/arm64
          outputs: type=image,name=${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }},push-by-digest=true,name-canonical=true
          labels: ${{ steps.meta.outputs.labels }}
          provenance: true
          sbom: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-manifest:
    name: Create and tag multi-arch manifest
    runs-on: ubuntu-latest
    needs: [ build-amd64, build-arm64 ]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags for manifest)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create multi-arch manifest(s)
        run: |
          echo "Creating manifest list(s) for tags:"
          echo "${{ steps.meta.outputs.tags }}"
          amd64_digest="${{ needs.build-amd64.outputs.digest }}"
          arm64_digest="${{ needs.build-arm64.outputs.digest }}"
          echo "amd64 digest: $amd64_digest"
          echo "arm64 digest: $arm64_digest"
          echo "${{ steps.meta.outputs.tags }}" | while read -r tag; do
            [ -z "$tag" ] && continue
            echo "Processing tag $tag"
            docker buildx imagetools create \
              -t "$tag" \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${amd64_digest} \
              ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}@${arm64_digest}
          done
      - name: Inspect 'latest' (optional)
        if: contains(steps.meta.outputs.tags, 'latest')
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest